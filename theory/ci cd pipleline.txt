ci/cd
continuous integration 
여러 개발자들의 코드 베이스를 계속해서 통합하는것

continuous delivery 
사용자에게 제품을 ,서비스를 지속적으로 배달한다
코드베이스가 항상 배포가능한 상태를 유지하는것

continuous deployment
코드베이스를 사용자가 사용가능한 환경에 배포하는 것을 자동화함

ci/cd란 각각의 개발자들이 개발을 하는 개발 환경을 사용자가 사용가능한 서비스로 전달하는
모든 과정을 지속가능한 형태로 또 가능하다면 자동으로 해서 개발자와 사용자 사이의 격차를 없애는 것이다.
이러한 과정에는 코드를 빌드하고, 테스트하고 배포하는 활동이 있다.

ci 왜 필요한가요
코드통합때문 개발자들이 많을때.

젠킨스란
java runtime 위에서 동작하는 자동화 서버
빌드,테스트,배포등 모든 것을 자동화 해주는 자동화 서버
비서! 난 개발만 할테니까 귀찮은건 니가 다해라!

기본개념
-java runtime environment 에서 동작
-다양한 플러그인들을 활용해서 각종 자동화 작업을 처리할 수 있음
-일련의 자동화 작업의 순서들의 집합인 pipeline을 통해서 ci/cd파이프라인을 구축함

plugin 
credentials plugin :중요한 정보저장(aws token, git access token, etc...)

pipeline 
파이프라인이란 ci/cd 파이프라인을 젠킨스에 구현하기 위한 일련의 플러그인들의 집합이자 구성
즉 여러 플러그인들을 이 파이프라인에서 용도에 맞게 사용하고 정의함으로써 파이프라인을 통해 서비스가 배포됨

ex) git, aws ,docker repository

pipeline syntax
젠킨스는 많은 일들을 해야 하기 때문에 혼자 하기 버겁다
여러 slave node를 두고 일을 시킬 수 있는데, 이처럼 어떤 젠킨스가 일을 하게 할 것인지를 지정한다
젠킨스 노드 관리에서 새로 노드를 띄우거나 혹은 docker 이미지등을 통해서 처리할 수 있음.

post section 스테이지가 끝난 후에 이후의 결과에 따라서 후속 조치를 취할 수 있다.
성공시에 성공 이메일, 실패하면 중단 혹은 건너뛰기 등등

개발 프로세스
개발자가 자신의 pc에서 개발을 진행한다.
다른 개발자가 작성한 코드와 차이가 발생하지 않는지 내부 테스트를 진행한다.
진행한 내용을 다른 개발자 들과 공유하기 위해 git과 같은 scm에 올린다.=> 흔히 dev브랜치
dev브랜치의 내용을 개발 환경에 배포하기 전에 테스트와 lint등 코드 포맷팅을 한다
배포하기 위한 빌드과정을 거친다
코드를 배포한다
테스트를 진행한다
위 모든 과정을 dev,aq,prod환경에서 모두 하고 각각의 맞는 환경에 배포한다.

aws리소스 간단리뷰-ECS
Elastic container service
도커컨테이너 기반으로 서비스 운용을 가능하게 해주는 간단한 서비스
무중단 배포를 제공하며 scale up이 가능한 특징
백엔드 서비스를 스케일업 가능한 형태로 배포하는데 최적화
수많은 도커 컨테이너 서버를 띄우고 lb가 이들 사이에 밸런싱을 해줌
fargate,ec2모드가 있어서 docker container 리소스만 띄우거 혹은 물리적인 ec2 instance 클러스터로 구성 가능

=>ecs 혹은 k8s등을 통해 rolling deploy가 처리되기 때문에 jenkins의 역할은 배포명령만 내려주면 된다.














