클라우드:빌려쓰기
사용한만큼만 돈을 지불: ondemand 
쓰는만큼지불

한개를 사는것보다 100개를 사는게 단가가 낮음 => 규모의경제
aws의 규모의 경제로 인한 이득을 누릴 수있음
aws의 모든 고객과 공동구매 하는 효과

클라우드 장점
속도 및 민첩성 개선
몇번의 클릭으로 바로 리로슷를 확보가능
데이터 운영및 유지관리에 비용 투자 불필요
빠른확장성: 몇번의 클릭으로 전 세계에 서비스 가능

==================================================
iaas: infrastructure as a service       인프라만제공(주방만 빌리기)
인프라만제공 
os를 직접 설치하고 필요한 소프트웨어를 개발해서 사용
즉 가상의 컴퓨터를 하나 임대하는 것과 비슷함
예 aws ec2(aws에서 가상의컴퓨터를 임대해주는것 )
==================================================
paas : platform as a service        : 인프라 + os+ 런타임제공(주방+주방기기+재료빌리기)
인프라 + os + 기타 프로그램 실행에 필요한 부분(런타임)
os+runtime, computing, storage, network ,app
바로 코드만 올려서 돌릴수 있도록 구성
ex: firebase, google app engine 등 
==================================================
saas: software as a service : 인프라 + os + 필요한 소프트웨어가 제공됨  모두제공 (전부 다 빌리기)
서비스 자체를 제공
다른 세팅없이 서비스만 이용
예:gmail,dropbox, slack, google docs
==================================================
공개형(클라우드)
모든 부분이 클라우드에서 실행
낮은 비용
높은 확장성
==================================================
폐쇄형
높은 수준의 커스터마이징 가능
초기 비용이 비쌈
유지보수 비용이 비쌈
높은 보안
==================================================
혼합형(하이브리드)
폐쇄형과 공개형의 혼합
==================================================
aws cloud 
리전: 서울,도표,호주,유럽,북미,남미
리전: vpc,s3,RDS(가용영역),EC2(가용영역)
리전: -AWS의 서비가 제공되는 서버의 물리적 위치
-전 세계에 흩어져 있으며 큰 구분(동남아,유럽,북아메리카 등등)으로 묶여 있음
-각 리전에는 고유의 코드가 부여됨
-예시: 서울 리전은 ap(asian pacific)-northeast-2
-예시2: 미국 동부(버지니아 북부)리전은 us-east-1
-리전별로 가능한 서비스가 다름 

-하나의 리전은 반드시 2개 이상의 가용영역으로 구성
-반드시 물리적으로 일정거리(몇km 이상 )떨어져 있음
-여러 재해및 보안용

엣지 로케이션 : AWS의 CloudFront(CDN,일종의저장공간이다.)등의 여러 서비스들을 가장 빠른 속도로 제공(캐싱)하기 위한 거점
전 세계에 여러 장소에 흩어져 있음.

AWS에는 서비가 제공되는 지역의 기반에따라 글로벌 서비스와 리전 서비스로 분류
글로벌 서비스: 데이터및 서비스를 전 세계의 모든 인프라가공유
-CloudFront, IAM, Route53,WAF 등이 있음
지역서비스: 특정 리전을 기반으로 데이터 및 서비스를 제공
-대부분의 서비스 
S3(데이터를 저장하는 서비스): 데이터 자체는 리전에 종속: 리전서비스 
Amazon resource name :aws의 모든 리소스의 고유 아이디
형식: arn:[partition]:[service]:[region]:[account_id]:[resource_type]/resource_name/(qualifier)
==================================================
루트유저: 생성한 계정의 모든 권한을 자동으로 가지고 있음
생성시 만든 이메일 주소로 로그인
탈취당했을 떄 복구가 매우 힘듬
aws api 호출불가 
==================================================
iam user :(identity and access management)를 통해 생성한 유저   
만들때 주어진 아이디로 로그인  
aws의 관리를 제외한 모든 작업은 관리용 iam user를 만들어 사용
aws 어카운트 관리및 리소스 /사용자/서비스의 권한제어

iam 구성:
사용자: 실제 AWS를 사용하는 사람 혹은 어플리케이션을 의미
그룹: 사용자의 집합
그룹에 속한 사용자는 그룹에 부여된 권한을 행사
정책: 사용자와 그룹, 역할이 무엇을 할수 있는지에 고나한문서
ROLE: AWS리소스에 부여하며 AWS리소스가 무엇을 할 수 있는지를 정의
==================================================
JSON: JavaScriptObjectNotation

사용자가 s3를 사용하고 싶을 경우
1.나에게 S3를 이용할 수 있는 정책이 부여되었는가?
2.내가 속한 그룹에 S3를 이용할 수 있는 정책이 부여되어있는가?
3.내게 위임된 역할에 S3를 이용할 수 있는 정책이 부여되어 있는가?

lambda에서 s3 서비스를 이용하고 싶을 경우
lambda에서 s3를 이용할수 있는정책이 부여되면 사용가능

루트사용자: 결제 관리를 포함한 계정의 모든 권한을 가지고 있음
-관리 목적 이외에 다른 용도로 사용하지 않는 것을 권장
-탈취 되었을때 복구가 매우 어려움-> MFA를 설정하는 것을 권장
-MFA(multi-factor authentication) : 일회용 패스워드를 생성하여 로그인

iam 사용자 : iam을 통해 생성해서 사용하는 사용자
-한사람 혹은 하나의 어플리케이션을 의미
-설정시 콘솔 로그인 권한 부여가능
-설정시 AWS서비스를 이용할 수 있음
-Access key
-secret access key
-adminAccess를 부여하더라도 루트 사용자로 별도의 설정을 하지 않으면 billing 기능을 사용할 수 없음
==================================================
가상화:단일 컴퓨터의 하드웨어 요소를 일반적으로 가상머신(VM)이라고 하는 다수의 가상 컴퓨터로 분할할 수 있도록 해주는 기술
빌드서버,웹서버,메일서버-> 합쳐서 하나의 통합서버 가상화에 3개다 집어넣어서 공간아낌.

운영체제: 시스템 하드웨어 자원과 소프트웨어 자원을 운영 관리하는 프로그램 
-window,linux,macos,android,ios...

하이퍼바이저: os와 하드웨어 사이에 존재하는 일종의 가상화 매니저
HVM: Hardware virtual machine 
-하드웨어에서 직접 가상화를 지원
직접 guest-os가 하드웨어와 통신 ->빠른속도

aws클라우드 환경에서 리소스를 작은 단위로 빠르게 구성할수 있는 원동력은 가상화
즉 aws에서 사용자마다 컴퓨터를 할당해주는 것이 아닌 이미 구축된 가상화 가능한 서버의 한 부분을 할당해 주는 것
==================================================
ec2란?
ec2:컴퓨팅을 빌려 쓰는 서비스
서버를 구축할떄,
데이터베이스, 머신러닝,비트코인채굴,연구용프로그램
초단위 가격결정
몇분이면 전세계 인스턴스 수백여대를 구축가능
다양한 구성방법 지원
머신러닝,웹서버,게임서버,이미지처리등 다양한 용도에 최적화된 서버 구성 가능
다양한 과금모델 사용 가능

여러 aws서비스와 연동
오토스케일링,elastic load balancer(elb), cloudwatch

인스턴스
-클라우드 에서 사용하는 가상 서버로 CPU,메모리,그래픽카드등 연산을 위한 하드웨어를 담당
EBS
- Elastic Block Storage의 줄임말로 클라우드에서 사용하는 가상 하드디스크
AMI 
-EC2인스턴스를 실행하기 위한 정보를 담고 있는 이미지
보안그룹
-가상의 방화벽

==================================================
ON-DEMAND 시간또는 초당 컴퓨팅 파워로 측정된 가격을 지불
SPOT INSTANCE 경매형식으로 시장에 남는 인스턴스를 저렴하게 구매해서 쓰는방식
예약인스턴스 미리 일정기간(1년~3년 )약정해서 쓰는 방식
전용 호스트 실제 물리적인 서버를 임대하는 방식 
스팟인스턴스 : 지정가격보다 높아지면 반납 아니면 사용

참고로 AWS는 AWS 바깥으로 나가는 트래픽에 대해서만 요금을 부과

각 인스턴스 별로 사용 목적에 따라 최적화
예: 메모리위주, cpu위주,그래픽카드 위주 등등 
타입별로 이름 부여 
예: t타입,m타입 등

인스턴스크기: 
인스턴스의 cpu개수, 메모리 크기, 성능 등으로 사이즈결정
크기가 클수록: 더많은 메모리, 더많은 cpu, 더많은 네트워크 대역폭, ebs와의 통신가능한 대역폭
인스턴스 타입 읽는법:
m(인스턴스타입)5(세대)a(접두사).xlarge(사이즈)

==================================================
ebs란?
ebs(elastic block store): ec2인스턴스에 사용할 영구블록스토리지 볼륨을 제공
가상 하드라이브
instance(연산담당) 
ec2인스턴스가 종료되어도 계속 유지 가능
인스턴스 정지 후 재 기동 가능
하나의 ebs를 여러 ec2장착 가능

snapshot: 특정 시간에 ebs 상태의 저장본
-ebs에 사진을 찍어둔 개념
s3에 보관

스냅샷의 증분식 백업 : 변화한 부분만 저장함(리소스아낌)
AMI : EC2인스턴스를 실행하기 위해 필요한 정보를 모은 단위 (OS,아키텍처 타입,저장공간 ,용량등)
AMI을 사용하여 EC2를 복제하거나 다른 리전- >계정으로 전달가능
스냅샷을 기반으로 AMI 구성가능

구성:
-1개이상의 EBS 스냅샷 
-인스턴스 저장 인스턴스의경우 루트 볼륨에 대한 템플릿:(예:운영체제,어플리케이션서버, 어플리케이션)
-사용권한(어떤AWS 어카운트가 사용할 수 있는지)
-블록 디바이스 맵핑(EC2인스턴스를 위한 볼륨 정보=EBS가 무슨용량으로 몇개 붙는지)

총두가지 
-EBS기반,인스턴스 저장기반
EBS: 스냅샷을 기반으로 루트 디바이스 생성
인스턴스저장: S3에 저장된 템플릿을 기반으로 생성


==================================================
EC2생명주기
AMI-> 실행
중지
중지후 재시작시 퍼블릭 IP변경됨
EBS를 사용하는 인스턴스만 중지가능: 인스턴스 저장 인스턴스는 중지 불가
재부팅
재부팅시 퍼블릭 IP 는 변함없음
최대절전모드
메모리 내용을 보존해서 재시작시 중단지점에서 시작할 수 있는 정지모드
메모리내용을 하드디스크에 시작할때 다시 메모리내용을 가져와서 사용
==================================================
스케일링
Vertical scale(scale up) 비용증가 
horizontal scale(scale out) 저렴

aws auto scaling 
어플리케이션을 모니터링하고 용량을 자동으로 조정하여, 최대한 저렴한 비용으로 안정적이고 예측 가능한 성능유지

목표: 정확한 수의 ec2인스턴스를 보유하도록 보장 
그룹의 최소 인스턴스 숫자및 최대인스턴스 숫자
-최소 숫자 이하로 내려가지 않도록 인스턴스 숫자를 유지(인스턴스 추가)
-최대 숫자 이상 늘어나지 않도록 인스턴스 숫자 유지(인스턴스 삭제)
다양한 스케일링 정책 적용 가능
-cpu의 부하에 따라 인스턴스크기를 늘리기
-가용 영역에 인스턴스가 골고루 분산될 수있도록 인스턴스를 분배 

오토스케일링의 구성
시작구성 :무엇을 실행시킬 것인가?
-ec2의타입, 사이즈
-AMI
-보안그룹, Key,IAM
-유저 데이터
모니터링: 언제 실행시킬 것인가?+ 상태확인
예:CPU점유율이 일정%를 넘어섰을때 추가로 실행 OR 2개 이상이필요한스택에서 EC2하나가 죽었을때
cloudwatch(and/or) ELB(분산처리)와 연계

==================================================
ELB(Elastic load balancer)

user-> instance
instance의 ip주소를 알아야 접근가능
user->하나의 address에 접근-> instance에 트래픽 분산 개수만큼..
elastic load balancing은 들어오는 애플리케이션 트래픽을 amazon ec2 인스턴스,컨테이너, ip주소, lambda함수와 같은 여러 대상에 자동으로 분산시킵니다.
elastic load balancing은 단일 가용영역 또는 여러 가용영역에서 다양한 애플리케이션 부하를 처리할 수 있습니다.

다수의 서비스에 트래픽을 분산 시켜주는 서비스
health check: 직접 트래픽을 발생시켜 instance가 살아있는지 체크
autoscaling 과 연동 가능
여러 가용 영역에 분산 가능
지속적으로 ip주소가 바뀌며 ip고정 불가능: 항상 도메인 기반으로 사용

총4가지
application load balancer
트래픽 모니터링하여 라우팅가능
예: image.sample.com->이미지 서버로, web.sample.com -> 웹 서버로 트래픽 분산

network load balancer
tcp 기반 빠른 트래픽 분산
elastic ip 할당 (ip고정시켜주는 서비스)가능

gateway load balancer 
먼저 트래픽 체크하는 녀석 ec2에 분산하기전에 
가상 어플라이언스 배포/확장 관리를 위한 서비스

ALB가 라우팅 할 대상의 집합
구성
-instance
-ip
-lambda
-다른 alb

프로토콜(HTTP,HTTPS,gRPC등)
기타설정
트래픽분산알고리즘,고정세션등

주소,포트를 읽을수 있어서 원하는 서버로 분산가능

==================================================
Amazon elastic file system(EFS)
는 AWS 클라우드 서비와 온프레미스 리소스에서 사용할 수 있는 간단하고 확장 가능하며
탄력적인 완전관리형 NFS 파일 시스템을 제공합니다.이 제품은 애플리케이션을 중단하지 않고
온디맨드 방식으로 페타바이트 규모까지 확장하도록 구축되어, 파일을 추가하고 제거할때 자동으로
확장하고 축소하며 확장규모에 맞게 용량을 프로비저닝 및 관리할 필요가 없습니다.

하나의 EBS는 하나의 EC2와 붙어있음.
EC2는 EFS를 공유함

NFS 기반 공유 스토리지 서비스
-따로 용량을 지정할 필요 없이 사용한 만큼 용량이 증가 <-> EBS는 미리 크기를 지정해야 함.
페타바이트 단위까지 확장 가능
몇 천개의 동시 접속 유지 가능
데이터는 여러 AZ에 나누어 분산저장
쓰기후 읽기 일관성
private service: aws 외부에서 접속 불가능
-aws외부에서 접속하기 위해서는 vpn 혹은 direct connect 등으로 별도로 vpc와 연결필요
-각 가용영역에 mount target를 두고 각각의 가용영역에서 해당 mount target으로 접근
-linux only

-subnet 은 항상 가용영역안에있음. 하나의 서브넷은 하나의 가용영역이다.

-Amazon EFS 퍼포먼스 모드
-General purpose: 가장 보편적인 모드, 거의 대부분의 경우 사용권장
-Max IO: 높은 IOPS가 필요한 경우, 빅데이터 , 미디어 처리등.

-Amazon EFS Throughput 모드 
-bursting Throughput : 낮은 Throughput일 때 크레딧을 모아서 높은 throughput 일떄 사용 
-EC2 T타입과 비슷한 개념

-EFS Standard: 3개이상의 가용영역에 보관
-EFS Standard- ia : 3개이상의 가용역에 보관, 조금 저렴한 비용대신 데이터를 가져올때 비용 발생
-EFS One Zone: 하나의 가용영역에보관-> 저장된가용영역의 상황에 영향을 받을 수 있음.


==================================================
private ip: 한정된 ip 주소를 최대한 활용하기 위해 ip주소를 분할하고자 만든개념
사설망: -사설망 내부에는 외부인터넷망으로 통신이 불가능한 사설ip로 구성 
-외부로 통신할때는 통신 가능한 공인 ip 로 나누어 사용
-보통하나의 망에는 사설ip를 부여받은 기기들과 nat기능을 갖춘 gateway로 구성

NAT: Network Address Transltation
사설 ip가 공용 ip로 통신할 수 있도록 주소를 변환해 주는 방법
3가지종류: dynamic ip : 1개의 사설 ip를 가용 가능한 공인ip로 연결 공인ip 그룹(nat pool)에서 현재 사용가능한 ip를 가져와서 연결
        static ip : 하나의 사설 ip를 고정된 하나의 공인 ip로 연결 aws internet gateway가 사용하는 방식
        pat(port address Translation) :많은 사설ip를 하나의 공인 ip로 연결 ,port를 여러개사용, 공인ip는 같은것을 사용 (pc방등)

classless inter domain routing 
-ip는 주소의 영역을 여러 네트워크 영역으로 나누기 위해 ip를 묶는방식
-여러개의 사설망을 구축하기 위해 망을 나누는 방법

cidr block/cidr notation(classless inter domain routing)
-cidr block: ip 주소의 집합
-cidr notation : cidr block을 표시하는 방법
 -네트워크 주소와 호스트 주소로 구성
 -각 호스트 주소 숫자만큼의 ip를 가진 네트워크 망 형성 가능

 a.b.c.d/e형식
 예 : 10.0.1.0/24 , 172.16.0.0/12
 a,b,c,d: 네트워크 주소+호스트 주소표시, e: 0~32 네트워크 주소가 몇 bit 인지 표시
 
192.168.2.0/24(network 주소) 나머지 8이(호스트주소32-24)
8 8 8 8 (bit)
네트워크:고정 !!
호스트: 변동
호스트주소는 변동!! 
32-24=8 =2^8 (256 개만큼 )호스트 주소만큼 ip 주소를 보유가능 / 256개 주소를 의미

서브넷
네트워크 안의 네트워크
큰 네트워크를 잘게 쪼갠단위
일정 ip 주소의 범위를 보유
-큰 네트워크에 부여된 ip범위를 조금식 잘라 작은 단위로 나눈 후 각 서브넷에  할당 

네트워크(192.168.0.0/16) 네트워크 
192.168.0.0/16 2^16개 만큼 보유가능 
서브넷1 (192.168.1.0/24) 서브넷2( 192.168.2.0/24).. 서브넷을 256개만들기 가능.

==================================================
VPC는 원래 Public internet 에서 접근불가 
virtual Private cloud (Vpc)는 사용자의 aws계정 전용 가상 네트워크입니다. vpc는 aws클라우드에서 다른
가상네트워크와 논리적으로 분리되어 있습니다. amazon ec2인스턴스와 같은 aws리소스를 vpc에서 실행할 수 있습니다
ip 주소범위와 vpc범위를 설정하고 서브넷을 추가하고 보안 그룹을 연결한 다음 라우팅 테이블을 구성합니다.

vpc = 가상으로 존재하는 데이터 센터
-가상의 데이터센터
-외부에 격리된 네트워크 컨테이너 구성 가능
-원하는대로 사설망을 구축 가능
-부여된 ip대역을 분할하여 사용가능
-리전단위

vpc의사용사례
-ec2,rds,lambda등의 aws의 컴퓨팅 서비스 실행
-다양한 서브넷 구성
-보안설정(ip block, 인터넷에 노출되지 않는 ec2등 구성)

vpc의 구성요소
-서브넷,인터넷게이트웨이,nacl/보안그룹,라우트테이블,nat instance/nat gateway, bastion host, vpc endpoint

서브넷 이란?
-vpc의 하위 단위로 vpc에 할당된 ip를 더 작은 단위로 분할한 개념
-하나의 서브넷은 하나의 가용영역(az)안에 위치
-cidr block range로 ip 주소 지정

aws서브넷의 ip 개수
-aws의 사용 가능 ip숫자는 5개를 제외하고 계산
-예 : 10.0.0.0/24라면, 
    -10.0.0.0 :네트워크 어드레스 
    -10.0.0.1: vpc router
    -10.0.0.2: dns server
    -10.0.0.3: 미래에 사용을 위해 남겨 둠
    -10.0.0.255(마지막번호): 네트워크 브로드캐스트 어드레스(단 브로드캐스트는 지원하지 않음)

VPC(10.0.0.0/16) subnet(10.0.0.0/24), subnet(10.0.1.0/24)

라우트테이블
ip가 어디로 가야할지 알려줌 라우트테이블에있는것중 가장 구체적인것

퍼블릭 서브넷: 외부에서 인터넷을 통해 연결할 수있는 서브넷
-인터넷 게이트웨이(igw)를 통해 외부의 인터넷과 연결되어 있음
-안에 위치한 인스턴스에 퍼블릭ip 부여 가능
-웹서버 ,어플리케이션 서버등 유저에게 노출되어야 하는 인프라

프라이빗 서브넷: 외부에서 인터넷을 통해 연결할 수 없는 서브넷 
-외부 인터넷으로 경로가 없음
-퍼블릭 ip 부여 불가능
-데이터베이스, 로직 서버등 외부에 노출될 필요가 없는 인프라

인터넷 게이트웨이
-vpc가 외부의 인터넷과 통신할 수 있도록 경로를 만들어주는 리소스
-기본적으로 확장성과 고가용성이 확보되어 있음
-ip4,ip6지원 ipv4의 경우 nat 역할
-route table 에서 경로 설정 후에 접근 가능 
-무료 

==================================================
보안그룹
Natwork Access control List(NACL)와 함께 방화벽의 역할을 하는 서비스
Port허용
-기본적으로 모든 포트는 비활성화
-선택적으로 트래픽이 지나갈 수 있는 port와 source를 설정 가능 
-deny는 불가능-> nacl로 가능함

인스턴스 단위
-하나의 인스턴스에 하나 이상의 sg설정가능
-nacl의 경우 서브넷 단위
-설정된 인스턴스는 설정한 모든 sg의 룰을 적용받음
-기본5개 최대 16개 

-stateful 방화벽
 들어왔던 포트번호 대로 내보내줌 막혀있더라도

 -stateless outbound allow x 
 들어올때는 맘대로지만 내보낼때 허용안함.

ACL(NACL)
-보안그룹처럼 방화벽 역할을 담당
-서브넷 단위
-포트및 아이피를 직접 DENY가능
-외부공격을 받는 상황등 특정 아이피를 블록하고 싶을때 사용
-순서대로 규칙평가 (낮은 번호부터)

==================================================
NAT 게이트웨이는 Amazon virtual private cloud(amazon vpc)의 프라이빗 서브넷에 있는 인스턴스에서 
인터넷에 쉽게 연결할 수 있도록 지원하는 가용성이 높은 AWS관리형 서비스 입니다.

NAT Gateway/NAT instance 
-private인스턴스가 외부의 인터넷과 통신하기 위한 통로 
-nat instance는 단일 ec2 인스턴스/ nat gateway는 aws에서 제공하는 서비스 
-nat gateway/instance는 모두 서브넷 단위
-Public subnet에 있어야 함.

-bastion host 
-외부에서 사설 네트워크에 접속할 수 있도록 경로를 확보해주는 서버
-private 인스턴스에 접근하기 위한 ec2 인스턴스  (다시들어오는)
-Public 서브넷에 위치해야함.


==================================================
amazon simple storage service(s3)
업계최고의 확장성과 데이터 가용성 및 보안과 성능을 제공하는 객체 스토리지 이다.
-객체 스토리지 서비스 : 파일 보관만가능 <-> block storage service (ebs, efs등)
어플리케이션 설치 불가능
무제한용량 하나의 객체는 0byte에서 5tb용량
버켓이란? 버킷이름은 전세계에서 고유값. 중복 x 

s3 스토리지 클래스
s3는 다양한 스토리지 클래스를 제공
-클래스 별로 저장의 목적, 예산에 따라 다른 저장 방법을 적용
-총8가지 클래스


==================================================






==================================================






==================================================





==================================================
